generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            BigInt       @id @default(dbgenerated("nextval('uqid'::regclass)")) @db.BigInt
  login         String       @unique(map: "UQ_2d443082eccd5198f95f2a36e2c") @db.VarChar
  name          String       @db.VarChar
  password      String       @db.VarChar
  bio           String?      @db.VarChar
  avatar        String?      @db.VarChar
  refresh_token String?      @db.VarChar
  secret        String?      @db.VarChar
  Message       Message[]
  ChatMember    ChatMember[]

  @@map("users")
}

model Chat {
  id              BigInt       @id @default(dbgenerated("nextval('uqid'::regclass)")) @db.BigInt
  type            String       @default("private") // private | group
  name            String?
  updated_at      DateTime     @updatedAt
  last_message_id BigInt?      @unique
  last_message    Message?     @relation("LastMessage", fields: [last_message_id], references: [id]) // Уникальная связь для последнего сообщения
  members         ChatMember[]
  messages        Message[]    @relation("ChatMessages") // Уникальная связь для всех сообщений

  @@index([last_message_id])
  @@map("chats")
}

model Message {
  id              BigInt               @id @default(dbgenerated("nextval('uqid'::regclass)")) @db.BigInt
  chat_id         BigInt
  user_id         BigInt
  content         String
  attachments     MessageAttachments[]
  created_at      DateTime             @default(now())
  chat            Chat                 @relation("ChatMessages", fields: [chat_id], references: [id]) // Связь для всех сообщений чата
  as_last_message Chat?                @relation("LastMessage") // Обратная связь для lastMessage
  user            User                 @relation(fields: [user_id], references: [id])

  @@index([chat_id, user_id])
  @@map("messeges")
}

model ChatMember {
  chat_id BigInt
  user_id BigInt
  role    Role?
  user    User   @relation(fields: [user_id], references: [id])
  chat    Chat?  @relation(fields: [chat_id], references: [id])

  @@id([chat_id, user_id])
  @@index([chat_id, user_id])
  @@map("chat_members")
}

enum Role {
  member
  admin
  owner
}

model MessageAttachments {
  message_id BigInt
  type       AttachmentType @default(image)
  path       String
  Message    Message        @relation(fields: [message_id], references: [id])

  @@id([message_id])
  @@index([message_id])
  @@map("message_attachments")
}

enum AttachmentType {
  image
  video
  gif
  docs
}
